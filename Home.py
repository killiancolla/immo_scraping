import streamlit as st
import pandas as pd
import numpy as np
from io import BytesIO
from function import *
import socket
import plotly.express as px
import re

ip = socket.gethostbyname(socket.gethostname())

st.set_page_config(
    page_title='Mon application immobili√®re',
    page_icon='üè¢',
    layout='centered'
)

scrap = Scrap()
streamlit = Streamlit()
database = DataBase("immoDB")

streamlit.sidebar()

st.title('Mon application immobili√®re üè¢')
st.write('Cette application vous permet de rechercher des offres de vente de biens dans votre ville. Chaque recherches qui sont faites vont enrichir notre base de donn√©es en scrapant le site https://www.bienici.com, nous enregistrons √©galement vos recherches qui sont li√©es √† votre adresse IP afin que vous puissiez retrouver vos recherches.')
st.write("Vous pouvez √©galement visualiser nos graphiques en actionnant le bouton ci-dessous.")

if st.checkbox("Voir les informations"):
    df = pd.DataFrame(database.select_table('offres'), columns=['id_', 'link', 'image', 'name', 'place', 'size', 'price', 'square_price'])
    bins = np.arange(0, df['size'].max() + 10, 10)
    labels = [f'{int(i)}-{int(i + 10)}' for i in bins[:-1]]
    df['size_range'] = pd.cut(df['size'], bins=bins, labels=labels, right=False)
    avg_prices = df.groupby('size_range')['price'].mean().reset_index()
    fig = px.bar(avg_prices, x='size_range', y='price', title='Moyenne des prix par taille', labels={'price': 'Prix moyen (en ‚Ç¨)', 'size_range': 'Taille (en m¬≤)'})
    st.plotly_chart(fig)

    def extract_city(place):
        # Liste des villes √† extraire
        cities = ["Paris", "Marseille", "Lyon", "Toulouse", "Nice", "Nantes", "Montpellier",
                "Strasbourg", "Bordeaux", "Lille", "Rennes", "Reims", "Saint-√âtienne",
                "Le Havre", "Toulon", "Grenoble", "Dijon", "Angers", "N√Æmes", "Villeurbanne"]

        for city in cities:
            if re.search(city, place, re.IGNORECASE):
                return city
        return None

    df['city'] = df['place'].apply(extract_city)
    df['square_price'] = round(df['price'] / df['size'], 0)
    avg_square_prices = df.groupby('city')['square_price'].mean().round().reset_index()
    fig = px.bar(avg_square_prices, x='city', y='square_price', title='Prix moyen au m¬≤ par ville', labels={'square_price': 'Prix moyen au m¬≤ (en ‚Ç¨)', 'city': 'Ville'})
    st.plotly_chart(fig)


user_input = st.text_input("Choisissez une ville")
nb_article = st.slider("Nombre d'offres √† afficher ?", 1, 300)

if st.button('Lancer la recherche'):
    try: 
        data, search = scrap.scrap_immo(user_input, nb_article)
        # Enregistrement en base des donn√©es trouv√©es ainsi que de l'historique
        scrap.save_data(ip, data, search)
        df = pd.DataFrame.from_dict(data, orient='index')
        towrite = BytesIO()
        df.to_excel(towrite, index=False, engine='openpyxl')
        towrite.seek(0)
        file_name = "article.xlsx"
        st.download_button(label="T√©l√©charger les donn√©es en Excel",
                            data=towrite,
                            file_name=file_name,
                            mime="application/vnd.ms-excel")
        for url, details in data.items():
            col1, col2 = st.columns(2)
            with col1: 
                st.image(details['image'])
            with col2:
                st.write(details['name'])
                st.write(details['place'])
                st.write(str(details['size']) + ' m¬≤')
                st.write(str(details['price']) + '‚Ç¨')
                st.write(str(details['square_price']) + '‚Ç¨/m¬≤')
            st.markdown("<hr>", unsafe_allow_html=True)
    except: 
        st.write("Aucune donn√©e n'ont √©t√© trouv√©es.")


df = database.select_table('offres')
df = pd.DataFrame(df)
def extract_postal_code(place):
    return place[:5]

df['postal_code'] = df['place'].apply(extract_postal_code)
df_sorted = df.sort_values(by='postal_code')
unique_places = df_sorted['place'].unique()

st.write('Recherche dans la base de donn√©es')
city = st.selectbox("Choisissez votre ville", unique_places)
df_new = database.select_table('offres', {'place': city})
nb_article = st.slider("Nombre d'offres √† afficher ?", 0, len(df_new))

if nb_article > 0:
    for i in range(nb_article):
        try:
            col1, col2 = st.columns(2)
            with col1: 
                st.image(df_new[i].image)
                st.link_button("Acc√®der √† l'offre", df_new[i].name)
            with col2:
                st.write(df_new[i]['name'])
                st.write(df_new[i].place)
                st.write(str(df_new[i].size) + ' m¬≤')
                st.write(str(df_new[i].price) + '‚Ç¨')
                st.write(str(df_new[i].square_price) + '‚Ç¨/m¬≤')
        except:
            break